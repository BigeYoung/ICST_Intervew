package com.example.icst.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.icst.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Gender = new Property(2, boolean.class, "Gender", false, "GENDER");
        public final static Property OriginalPhoto = new Property(3, String.class, "OriginalPhoto", false, "ORIGINAL_PHOTO");
        public final static Property Photo = new Property(4, String.class, "Photo", false, "PHOTO");
        public final static Property College = new Property(5, Integer.class, "College", false, "COLLEGE");
        public final static Property Major = new Property(6, String.class, "Major", false, "MAJOR");
        public final static Property Phone = new Property(7, String.class, "Phone", false, "PHONE");
        public final static Property PhoneShort = new Property(8, String.class, "PhoneShort", false, "PHONE_SHORT");
        public final static Property QQ = new Property(9, String.class, "QQ", false, "QQ");
        public final static Property Wechat = new Property(10, String.class, "Wechat", false, "WECHAT");
        public final static Property Dorm = new Property(11, String.class, "Dorm", false, "DORM");
        public final static Property Adjust = new Property(12, boolean.class, "Adjust", false, "ADJUST");
        public final static Property Wish1 = new Property(13, int.class, "Wish1", false, "WISH1");
        public final static Property Wish2 = new Property(14, int.class, "Wish2", false, "WISH2");
        public final static Property Note = new Property(15, String.class, "Note", false, "NOTE");
        public final static Property Noticed = new Property(16, Boolean.class, "Noticed", false, "NOTICED");
        public final static Property Deleted = new Property(17, Boolean.class, "Deleted", false, "DELETED");
        public final static Property Signed = new Property(18, Boolean.class, "Signed", false, "SIGNED");
        public final static Property Accepted = new Property(19, Integer.class, "Accepted", false, "ACCEPTED");
        public final static Property GroupId = new Property(20, long.class, "groupId", false, "GROUP_ID");
    }

    private DaoSession daoSession;

    private Query<Student> group_StudentListQuery;

    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: Name
                "\"GENDER\" INTEGER NOT NULL ," + // 2: Gender
                "\"ORIGINAL_PHOTO\" TEXT," + // 3: OriginalPhoto
                "\"PHOTO\" TEXT," + // 4: Photo
                "\"COLLEGE\" INTEGER," + // 5: College
                "\"MAJOR\" TEXT," + // 6: Major
                "\"PHONE\" TEXT NOT NULL ," + // 7: Phone
                "\"PHONE_SHORT\" TEXT," + // 8: PhoneShort
                "\"QQ\" TEXT," + // 9: QQ
                "\"WECHAT\" TEXT," + // 10: Wechat
                "\"DORM\" TEXT," + // 11: Dorm
                "\"ADJUST\" INTEGER NOT NULL ," + // 12: Adjust
                "\"WISH1\" INTEGER NOT NULL ," + // 13: Wish1
                "\"WISH2\" INTEGER NOT NULL ," + // 14: Wish2
                "\"NOTE\" TEXT," + // 15: Note
                "\"NOTICED\" INTEGER," + // 16: Noticed
                "\"DELETED\" INTEGER," + // 17: Deleted
                "\"SIGNED\" INTEGER," + // 18: Signed
                "\"ACCEPTED\" INTEGER," + // 19: Accepted
                "\"GROUP_ID\" INTEGER NOT NULL );"); // 20: groupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getGender() ? 1L: 0L);

        String OriginalPhoto = entity.getOriginalPhoto();
        if (OriginalPhoto != null) {
            stmt.bindString(4, OriginalPhoto);
        }
 
        String Photo = entity.getPhoto();
        if (Photo != null) {
            stmt.bindString(5, Photo);
        }
 
        Integer College = entity.getCollege();
        if (College != null) {
            stmt.bindLong(6, College);
        }
 
        String Major = entity.getMajor();
        if (Major != null) {
            stmt.bindString(7, Major);
        }
        stmt.bindString(8, entity.getPhone());
 
        String PhoneShort = entity.getPhoneShort();
        if (PhoneShort != null) {
            stmt.bindString(9, PhoneShort);
        }
 
        String QQ = entity.getQQ();
        if (QQ != null) {
            stmt.bindString(10, QQ);
        }
 
        String Wechat = entity.getWechat();
        if (Wechat != null) {
            stmt.bindString(11, Wechat);
        }
 
        String Dorm = entity.getDorm();
        if (Dorm != null) {
            stmt.bindString(12, Dorm);
        }
        stmt.bindLong(13, entity.getAdjust() ? 1L : 0L);
        stmt.bindLong(14, entity.getWish1());
        stmt.bindLong(15, entity.getWish2());
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(16, Note);
        }
 
        Boolean Noticed = entity.getNoticed();
        if (Noticed != null) {
            stmt.bindLong(17, Noticed ? 1L : 0L);
        }
 
        Boolean Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(18, Deleted ? 1L : 0L);
        }
 
        Boolean Signed = entity.getSigned();
        if (Signed != null) {
            stmt.bindLong(19, Signed ? 1L : 0L);
        }
 
        Integer Accepted = entity.getAccepted();
        if (Accepted != null) {
            stmt.bindLong(20, Accepted);
        }
        stmt.bindLong(21, entity.getGroupId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getGender() ? 1L: 0L);

        String OriginalPhoto = entity.getOriginalPhoto();
        if (OriginalPhoto != null) {
            stmt.bindString(4, OriginalPhoto);
        }
 
        String Photo = entity.getPhoto();
        if (Photo != null) {
            stmt.bindString(5, Photo);
        }
 
        Integer College = entity.getCollege();
        if (College != null) {
            stmt.bindLong(6, College);
        }
 
        String Major = entity.getMajor();
        if (Major != null) {
            stmt.bindString(7, Major);
        }
        stmt.bindString(8, entity.getPhone());
 
        String PhoneShort = entity.getPhoneShort();
        if (PhoneShort != null) {
            stmt.bindString(9, PhoneShort);
        }
 
        String QQ = entity.getQQ();
        if (QQ != null) {
            stmt.bindString(10, QQ);
        }
 
        String Wechat = entity.getWechat();
        if (Wechat != null) {
            stmt.bindString(11, Wechat);
        }
 
        String Dorm = entity.getDorm();
        if (Dorm != null) {
            stmt.bindString(12, Dorm);
        }
        stmt.bindLong(13, entity.getAdjust() ? 1L : 0L);
        stmt.bindLong(14, entity.getWish1());
        stmt.bindLong(15, entity.getWish2());
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(16, Note);
        }
 
        Boolean Noticed = entity.getNoticed();
        if (Noticed != null) {
            stmt.bindLong(17, Noticed ? 1L : 0L);
        }
 
        Boolean Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(18, Deleted ? 1L : 0L);
        }
 
        Boolean Signed = entity.getSigned();
        if (Signed != null) {
            stmt.bindLong(19, Signed ? 1L : 0L);
        }
 
        Integer Accepted = entity.getAccepted();
        if (Accepted != null) {
            stmt.bindLong(20, Accepted);
        }
        stmt.bindLong(21, entity.getGroupId());
    }

    @Override
    protected final void attachEntity(Student entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Name
            cursor.getShort(offset + 2) != 0, // Gender
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OriginalPhoto
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Photo
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // College
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Major
                cursor.getString(offset + 7), // Phone
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PhoneShort
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // QQ
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Wechat
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Dorm
                cursor.getShort(offset + 12) != 0, // Adjust
                cursor.getInt(offset + 13), // Wish1
                cursor.getInt(offset + 14), // Wish2
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Note
                cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // Noticed
                cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // Deleted
                cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // Signed
                cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // Accepted
                cursor.getLong(offset + 20) // groupId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setGender(cursor.getShort(offset + 2) != 0);
        entity.setOriginalPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCollege(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMajor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.getString(offset + 7));
        entity.setPhoneShort(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQQ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWechat(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDorm(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAdjust(cursor.getShort(offset + 12) != 0);
        entity.setWish1(cursor.getInt(offset + 13));
        entity.setWish2(cursor.getInt(offset + 14));
        entity.setNote(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNoticed(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setDeleted(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setSigned(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setAccepted(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setGroupId(cursor.getLong(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "studentList" to-many relationship of Group. */
    public List<Student> _queryGroup_StudentList(long groupId) {
        synchronized (this) {
            if (group_StudentListQuery == null) {
                QueryBuilder<Student> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GroupId.eq(null));
                group_StudentListQuery = queryBuilder.build();
            }
        }
        Query<Student> query = group_StudentListQuery.forCurrentThread();
        query.setParameter(0, groupId);
        return query.list();
    }

}
