package com.example.icst.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.icst.Group;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP".
*/
public class GroupDao extends AbstractDao<Group, Long> {

    public static final String TABLENAME = "GROUP";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Time = new Property(1, java.util.Date.class, "Time", false, "TIME");
        public final static Property Location = new Property(2, String.class, "Location", false, "LOCATION");
        public final static Property Head = new Property(3, String.class, "Head", false, "HEAD");
        public final static Property HeadPhone = new Property(4, String.class, "HeadPhone", false, "HEAD_PHONE");
        public final static Property State = new Property(5, int.class, "State", false, "STATE");
        public final static Property Depart = new Property(6, Integer.class, "Depart", false, "DEPART");
    }

    private DaoSession daoSession;


    public GroupDao(DaoConfig config) {
        super(config);
    }
    
    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: Time
                "\"LOCATION\" TEXT NOT NULL ," + // 2: Location
                "\"HEAD\" TEXT NOT NULL ," + // 3: Head
                "\"HEAD_PHONE\" TEXT NOT NULL ," + // 4: HeadPhone
                "\"STATE\" INTEGER NOT NULL ," + // 5: State
                "\"DEPART\" INTEGER);"); // 6: Depart
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Group entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTime().getTime());
        stmt.bindString(3, entity.getLocation());
        stmt.bindString(4, entity.getHead());
        stmt.bindString(5, entity.getHeadPhone());
        stmt.bindLong(6, entity.getState());
 
        Integer Depart = entity.getDepart();
        if (Depart != null) {
            stmt.bindLong(7, Depart);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTime().getTime());
        stmt.bindString(3, entity.getLocation());
        stmt.bindString(4, entity.getHead());
        stmt.bindString(5, entity.getHeadPhone());
        stmt.bindLong(6, entity.getState());
 
        Integer Depart = entity.getDepart();
        if (Depart != null) {
            stmt.bindLong(7, Depart);
        }
    }

    @Override
    protected final void attachEntity(Group entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
            cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // Time
            cursor.getString(offset + 2), // Location
            cursor.getString(offset + 3), // Head
            cursor.getString(offset + 4), // HeadPhone
            cursor.getInt(offset + 5), // State
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // Depart
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTime(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setLocation(cursor.getString(offset + 2));
        entity.setHead(cursor.getString(offset + 3));
        entity.setHeadPhone(cursor.getString(offset + 4));
        entity.setState(cursor.getInt(offset + 5));
        entity.setDepart(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Group entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Group entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Group entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
